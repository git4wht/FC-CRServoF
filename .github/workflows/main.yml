# This is a basic workflow to help you get started with Actions

name: PlatformIO CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        target:
          type: choice
          description: target to build.[F103_serial,CC3D,PURPLEPILL]
          required: false
          default: ALL
          options: 
          - ALL
          - F103_serial
          - CC3D
          - PURPLEPILL

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          wget https://github.com/CapnBry/CRServoF/archive/master.zip -O /tmp/CRServoF.zip
          unzip /tmp/CRServoF.zip -d /tmp
          rm -rf /tmp/targets
          mkdir -p /tmp/targets

      - name: Run PlatformIO
        if: github.event.inputs.target == 'ALL'
        run: |
          cd /tmp/CRServoF-master
          platformio run 
          cp /tmp/CRServoF-master/.pio/build/F103_serial/firmware.bin /tmp/targets/F103_serial-firmware.bin
          cp /tmp/CRServoF-master/.pio/build/F103_serial/firmware.elf /tmp/targets/F103_serial-firmware.elf
          cp /tmp/CRServoF-master/.pio/build/CC3D/firmware.bin /tmp/targets/CC3D-firmware.bin
          cp /tmp/CRServoF-master/.pio/build/CC3D/firmware.elf /tmp/targets/CC3D-firmware.elf
          cp /tmp/CRServoF-master/.pio/build/PURPLEPILL/firmware.bin /tmp/targets/PURPLEPILL-firmware.bin
          cp /tmp/CRServoF-master/.pio/build/PURPLEPILL/firmware.elf /tmp/targets/PURPLEPILL-firmware.elf

      - name: Run PlatformIO
        if: github.event.inputs.target != 'ALL'
        run: |
          cd /tmp/CRServoF-master
          platformio run --environment ${{ github.event.inputs.target }} 
          cp /tmp/CRServoF-master/.pio/build/${{ github.event.inputs.target }}/firmware.bin /tmp/targets/${{ github.event.inputs.target }}-firmware.bin
          cp /tmp/CRServoF-master/.pio/build/${{ github.event.inputs.target }}/firmware.elf /tmp/targets/${{ github.event.inputs.target }}-firmware.elf
          
      # upload to-github-release
      - name: Upload to github release
        uses: xresloader/upload-to-github-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        with:
          file: "/tmp/targets/*.*"
          tag_name: ${{ github.ref_name }}
          overwrite: true
          draft: false
          update_latest_release: true
